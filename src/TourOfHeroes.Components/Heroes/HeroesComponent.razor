@using BlazorState;
@using TourOfHeroes.Data
@using TourOfHeroes.Components.Heroes.State
@using TourOfHeroes.Components.Heroes.Validation

@inherits BlazorStateComponent

<div class="container">
    <div class="jumbotron jumbotron-fluid">
        <div class="container">
            <h1 class="display-4">My Heroes</h1>
        </div>
    </div>

    <div class="card hero-add-form">
        <div class="card-body">
            <EditForm class="form-inline" Model="@hero" OnValidSubmit="@Add">
                <div class="form-group mx-sm-3 mb-2">     
                    <FluentValidator TValidator="HeroValidation" />
                    <InputText id="name" @bind-Value="@hero.Name" class="form-control" type="text" placeholder="Hero name" />
                </div>
                <button type="submit" class="btn btn-primary mb-2">Add</button>
                <div >
                    <ValidationSummary />
                </div>
            </EditForm>
        </div>
    </div>

    <div class="card-columns">
        @foreach (var hero in heroState.Heroes)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@hero.Name</h5>
                    <p class="card-text">ID: @hero.Id</p>
                </div>
                <div class="card-footer text-right">
                    <button class="btn btn-sm btn-link" @onclick="@(() => Delete(hero))">Delete</button>
                    <button type="button" class="btn btn-sm btn-dark">Edit</button>
                </div>
            </div>
        }
    </div>

    @if (heroState.Heroes.Any() == false)
    {
        <div class="alert alert-info" role="alert">
            <strong>Oh no!</strong> It looks like you don't have any heroes ðŸ˜•
        </div>
    }

</div>

@code {
    HeroState heroState => GetState<HeroState>();
    Hero hero = new Hero();

    protected void Add()
    {
        Mediator.Send(new State.Actions.HeroState.Add(hero.Name));
        hero.Name = string.Empty;
    }

    protected void Delete(Hero hero)
    {
        Mediator.Send(new State.Actions.HeroState.Delete(hero));
    }

    protected override void OnInitialized()
    {
        if (heroState.Heroes.Any() == false)
        {
            Mediator.Send(new State.Actions.HeroState.Load());
        }
    }
}
